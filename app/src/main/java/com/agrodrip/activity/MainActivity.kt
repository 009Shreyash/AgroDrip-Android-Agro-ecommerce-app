package com.agrodrip.activityimport android.Manifestimport android.annotation.SuppressLintimport android.app.Dialogimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageManagerimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport android.graphics.drawable.Drawableimport android.graphics.drawable.LayerDrawableimport android.location.Locationimport android.location.LocationManagerimport android.net.ConnectivityManagerimport android.net.NetworkInfoimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.os.Handlerimport android.provider.Settingsimport android.util.Logimport android.view.Menuimport android.view.MenuItemimport android.view.Viewimport android.view.Windowimport android.widget.ImageViewimport android.widget.LinearLayoutimport android.widget.TextViewimport android.widget.Toastimport androidx.appcompat.app.ActionBarimport androidx.appcompat.app.ActionBarDrawerToggleimport androidx.appcompat.app.AlertDialogimport androidx.appcompat.widget.Toolbarimport androidx.core.app.ActivityCompatimport androidx.core.view.GravityCompatimport androidx.databinding.DataBindingUtilimport androidx.fragment.app.Fragmentimport com.agrodrip.BaseActivityimport com.agrodrip.BuildConfigimport com.agrodrip.Rimport com.agrodrip.activity.address.AddressListActivityimport com.agrodrip.activity.orders.OrderListActivityimport com.agrodrip.activity.settings.SettingActivityimport com.agrodrip.activity.settings.UpdateProfileActivityimport com.agrodrip.activity.startupScreen.SelectLanguageActivityimport com.agrodrip.databinding.ActivityMainBindingimport com.agrodrip.fragment.DripSectionFragmentimport com.agrodrip.fragment.HomeFragmentimport com.agrodrip.fragment.MarketPlaceFragmentimport com.agrodrip.fragment.MyFarmFragmentimport com.agrodrip.model.CartListResponseimport com.agrodrip.model.UserDataimport com.agrodrip.utils.BadgeDrawableimport com.agrodrip.utils.Constantsimport com.agrodrip.utils.Prefimport com.agrodrip.weather.activities.ForecastActivityimport com.agrodrip.webservices.ApiHandlerimport com.agrodrip.webservices.snackBarimport com.bumptech.glide.Glideimport com.google.android.gms.location.FusedLocationProviderClientimport com.google.android.gms.location.LocationServicesimport com.google.android.gms.maps.model.LatLngimport com.google.android.material.bottomnavigation.BottomNavigationViewimport com.google.android.material.navigation.NavigationViewimport com.google.android.material.snackbar.Snackbarimport de.hdodenhof.circleimageview.CircleImageViewimport kotlinx.android.synthetic.main.activity_main.*import kotlinx.android.synthetic.main.content_main.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass MainActivity : BaseActivity(), NavigationView.OnNavigationItemSelectedListener {    private lateinit var name: TextView    private lateinit var ivProfile: CircleImageView    private lateinit var data: UserData    private var doubleBackToExitPressedOnce = false    private val PERMISSION_ACCESS_FINE_LOCATION = 0    private var connectivityManager: ConnectivityManager? = null    private var networkInfo: NetworkInfo? = null    private var locationManager: LocationManager? = null    private var builder: AlertDialog.Builder? = null    private var isConnected = false    private var permissionRequestResult = 0    private lateinit var txtLocation: TextView    private var isHome = true    private var isMarket = false    private var isFarm = false    private var isDrip = false    private lateinit var toolbar: Toolbar    private lateinit var binding: ActivityMainBinding    //current lat long    private var fusedLocationClient: FusedLocationProviderClient? = null    override fun attachBaseContext(newBase: Context?) {        super.attachBaseContext(newBase)    }    private var lastLocation: Location? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)        openFragment(HomeFragment())        binding.navigationView.setNavigationItemSelectedListener(this)        binding.navigationView.itemIconTintList = null        val navHeaderView = binding.navigationView.inflateHeaderView(R.layout.nav_header_main)        txtLocation = navHeaderView.findViewById(R.id.tv_location) as TextView        name = navHeaderView.findViewById(R.id.tv_name) as TextView        ivProfile = navHeaderView.findViewById(R.id.iv_profile) as CircleImageView        val goToEditProfile = navHeaderView.findViewById(R.id.ll_edit_profile) as LinearLayout        val shareProfile = navHeaderView.findViewById(R.id.shareProfile) as LinearLayout        goToEditProfile.setOnClickListener {            startActivity(Intent(this, UpdateProfileActivity::class.java))        }        shareProfile.setOnClickListener {            shaeProfile()        }        data = Pref.getUserData(this)!!        Glide.with(binding.root)            .load(data.profile)            .placeholder(R.drawable.places_autocomplete_toolbar_shadow)            .error(R.drawable.ic_add_photo)            .into(ivProfile)        name.text = data.name        binding.contentMain.bottomNavigation.setOnNavigationItemSelectedListener(            navigationItemSelectedListener        )        binding.contentMain.bottomNavigation.itemIconTintList = null        invalidateOptionsMenu()        getCartList()    }    private fun shaeProfile() {        val sendIntent = Intent()        sendIntent.action = Intent.ACTION_SEND        sendIntent.putExtra(            Intent.EXTRA_TEXT,            resources.getString(R.string.share_profile_desc) + BuildConfig.APPLICATION_ID        )        sendIntent.type = "text/plain"        startActivity(Intent.createChooser(sendIntent, resources.getString(R.string.share_profile_by)))    }    fun onHidingToolbar(b: Boolean, title: String) {        toolbar = findViewById(R.id.toolbar)        val toolbarText = toolbar.findViewById<TextView>(R.id.toolbarText)        toolbarText.text = title        val imgback = toolbar.findViewById<ImageView>(R.id.imgBack)        val iv_cart = toolbar.findViewById<ImageView>(R.id.iv_cart)        imgback.visibility = View.GONE//        iv_cart.visibility = View.VISIBLE        iv_cart.setOnClickListener {            val intent = Intent(this@MainActivity, CartListActivity::class.java)            startActivity(intent)        }        setSupportActionBar(toolbar)        if (b) {            supportActionBar!!.hide()        } else {            supportActionBar!!.show()        }        val toggle = ActionBarDrawerToggle(            this,            drawerLayout,            toolbar,            R.string.navigation_drawer_open,            R.string.navigation_drawer_close        )        drawerLayout.setDrawerListener(toggle)        toggle.syncState()    }    private var navigationItemSelectedListener: BottomNavigationView.OnNavigationItemSelectedListener =        object : BottomNavigationView.OnNavigationItemSelectedListener {            override fun onNavigationItemSelected(item: MenuItem): Boolean {                when (item.itemId) {                    R.id.actionHome -> {                        if (!isHome) {                            openFragment(HomeFragment())                            isHome = true                        }                        isMarket = false                        isFarm = false                        isDrip = false                        return true                    }                    R.id.actionMarket -> {                        if (!isMarket) {                            openFragment(MarketPlaceFragment())                            isMarket = true                        }                        isHome = false                        isFarm = false                        isDrip = false                        return true                    }                    R.id.actionDrip -> {                        if (!isDrip) {                            openFragment(DripSectionFragment())                            isDrip = true                        }                        isHome = false                        isFarm = false                        isMarket = false                        return true                    }                    R.id.actionFarm -> {                        if (!isFarm) {                            openFragment(MyFarmFragment())                            isFarm = true                        }                        isHome = false                        isMarket = false                        isDrip = false                        return true                    }                }                return false            }        }    private fun openFragment(fragment: Fragment?) {        supportFragmentManager.beginTransaction()            .setCustomAnimations(R.anim.slide_in_left, R.anim.slide_out_left)            .replace(R.id.container, fragment!!).addToBackStack(null)            .commit()    }    override fun onNavigationItemSelected(menu: MenuItem): Boolean {        when (menu.itemId) {            R.id.nav_weather -> {                initMembers()                checkPermissionAndConnectivity(                    permissionRequestResult,                    locationManager!!,                    isConnected                )            }            R.id.nav_unit_converter -> {                startActivity(Intent(this, UnitConverterActivity::class.java))            }            R.id.nav_order_list -> {                startActivity(Intent(this, OrderListActivity::class.java))            }            R.id.nav_my_bag -> {                startActivity(Intent(this, CartListActivity::class.java))            }            R.id.nav_setting -> {                startActivity(Intent(this, SettingActivity::class.java))            }            R.id.nav_address -> {                val intent = Intent(this, AddressListActivity::class.java)                intent.putExtra("isFrom", "Main")                startActivity(intent)            }            R.id.nav_feedback -> {                startActivity(Intent(this, FeedbackActivity::class.java))            }            R.id.nav_share -> {                shareApp()            }            R.id.nav_watch_demo -> {                val intent = Intent(this, WatchDemoActivity::class.java)                intent.putExtra("videoUrl", "5M_g74Zuclk")                startActivity(intent)            }            R.id.nav_tearms -> {            }            R.id.nav_about -> {            }//            R.id.nav_logout -> {//                logoutDialog()//            }        }        drawerLayout.closeDrawer(GravityCompat.START)        return true    }    private fun logoutDialog() {        val dialog = Dialog(this)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.setCancelable(false)        dialog.setContentView(R.layout.custom_dialog_layout)        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))        dialog.window!!.setLayout(            ActionBar.LayoutParams.MATCH_PARENT,            ActionBar.LayoutParams.WRAP_CONTENT        )        val textYes = dialog.findViewById(R.id.txtYes) as TextView        val textNo = dialog.findViewById(R.id.txtNo) as TextView        textYes.setOnClickListener {            Pref.clearAll(this@MainActivity)            startActivity(Intent(this@MainActivity, SelectLanguageActivity::class.java))            finish()            dialog.dismiss()        }        textNo.setOnClickListener { dialog.dismiss() }        dialog.show()    }    override fun onBackPressed() {        val mBottomNavigationView = findViewById<BottomNavigationView>(R.id.bottomNavigation)        if (mBottomNavigationView.selectedItemId == R.id.actionHome) {            if (doubleBackToExitPressedOnce) {                finish()                return            }            doubleBackToExitPressedOnce = true            Toast.makeText(this, getString(R.string.double_click), Toast.LENGTH_SHORT).show()            Handler().postDelayed(Runnable { doubleBackToExitPressedOnce = false }, 2000)        } else {            mBottomNavigationView.selectedItemId = R.id.actionHome        }    }    private fun shareApp() {        val sendIntent = Intent()        sendIntent.action = Intent.ACTION_SEND        sendIntent.putExtra(            Intent.EXTRA_TEXT,            resources.getString(R.string.share_app_desc) + BuildConfig.APPLICATION_ID        )        sendIntent.type = "text/plain"        startActivity(Intent.createChooser(sendIntent, resources.getString(R.string.share_app_by)))    }    private fun initMembers() {        builder = AlertDialog.Builder(this)        connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager        networkInfo = connectivityManager!!.activeNetworkInfo        isConnected = networkInfo != null && networkInfo!!.isConnectedOrConnecting        locationManager = getSystemService(LOCATION_SERVICE) as LocationManager        permissionRequestResult = checkCallingOrSelfPermission("android.permission.ACCESS_FINE_LOCATION")    }    private fun checkPermissionAndConnectivity(        permissionRequestResult: Int,        locationManager: LocationManager,        isConnected: Boolean    ) {        if (permissionRequestResult == 0) {            if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {                if (isConnected) {                    startWheatherActivity()                } else {                    Snackbar.make(parentLayout, R.string.msg_internet, Snackbar.LENGTH_LONG)                        .setAction("Ok") { finish() }                        .setActionTextColor(parentLayout.resources.getColor(android.R.color.holo_red_light))                        .show()                }            } else {                Snackbar.make(parentLayout, R.string.msg_gps, Snackbar.LENGTH_LONG)                    .setAction("Ok") { finish() }                    .setActionTextColor(parentLayout.resources.getColor(android.R.color.holo_red_light))                    .show()            }        } else {            ActivityCompat.requestPermissions(                this,                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),                PERMISSION_ACCESS_FINE_LOCATION            )        }    }    private fun startWheatherActivity() {        Handler().postDelayed({            startActivity(Intent(this, ForecastActivity::class.java))        }, 1000)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == 1001) {            if (resultCode == RESULT_OK) {            }        }    }    override fun onCreateOptionsMenu(menu: Menu?): Boolean {        invalidateOptionsMenu()        menuInflater.inflate(R.menu.toolbar_main, menu)        val itemCart = menu!!.findItem(R.id.action_cart)        val icon: LayerDrawable = itemCart.icon as LayerDrawable        setBadgeCount(this, icon, Pref.getValue(this, Constants.PREF_BADGE, ""))        return super.onCreateOptionsMenu(menu)    }    private fun setBadgeCount(context: Context?, icon: LayerDrawable, count: String?) {        val badge: BadgeDrawable        val reuse: Drawable? = icon.findDrawableByLayerId(R.id.ic_badge)        if (reuse != null && reuse is BadgeDrawable) {            badge = reuse        } else {            badge = BadgeDrawable(context)        }        badge.setCount(count)        icon.mutate()        icon.setDrawableByLayerId(R.id.ic_badge, badge)    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        if (item.itemId == R.id.action_cart) {            val intent = Intent(this@MainActivity, CartListActivity::class.java)            startActivity(intent)        }        return super.onOptionsItemSelected(item)    }    private fun getCartList() {//        val mDialog = Utils.fcreateDialog(this)        val call: Call<CartListResponse>? = ApiHandler.getApiService(this)?.getCartList("Bearer " + data.app_key)        call?.enqueue(object : Callback<CartListResponse> {            @SuppressLint("SetTextI18n")            override fun onResponse(                call: Call<CartListResponse>,                response: Response<CartListResponse>            ) {                val resData = response.body()                if (resData != null && response.isSuccessful) {                    Log.d("res", "res$resData")                    Pref.setValue(                        this@MainActivity,                        Constants.PREF_BADGE,                        resData.row.size.toString()                    )                } else {                    Pref.setValue(this@MainActivity, Constants.PREF_BADGE, "0")                }            }            override fun onFailure(call: Call<CartListResponse>, t: Throwable) {//                mDialog.dismiss()                binding.root.snackBar(getString(R.string.msg_internet))                Log.d("TAG", "onFailure: " + t.cause.toString())            }        })    }    override fun onResume() {        super.onResume()        getCartList()        data = Pref.getUserData(this)!!        Glide.with(binding.root)            .load(data.profile)            .placeholder(R.drawable.places_autocomplete_toolbar_shadow)            .error(R.drawable.ic_add_photo)            .into(ivProfile)        name.text = data.name    }    //current location    public override fun onStart() {        super.onStart()        if (!checkPermissions()) {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                requestPermissions()            }        } else {            getLastLocation()        }        if (Pref.getValue(this, Constants.PREF_ADDRESS, "").toString().isNotEmpty()) {            txtLocation.text = Pref.getValue(this, Constants.PREF_ADDRESS, "").toString()        }    }    @SuppressLint("MissingPermission")    private fun getLastLocation() {        fusedLocationClient?.lastLocation!!.addOnCompleteListener(this) { task ->            if (task.isSuccessful && task.result != null) {                lastLocation = task.result                val latitudeLabel = (lastLocation)!!.latitude                val longitudeLabel = (lastLocation)!!.longitude                val latLong = LatLng(latitudeLabel, longitudeLabel)                Log.d(TAG, "getLastLocation:latLong$latLong")                Log.d(                    TAG, "getLastLocation:latLong" + latLong.toString().replace("(", "").replace(                        ")",                        ""                    )                )                val str = latLong.toString().replace("(", "").replace(")", "").replace(                    "lat/lng:",                    ""                )                Pref.setValue(this, Constants.PREF_LATLONG, str)            } else {                Log.w(TAG, "getLastLocation:exception", task.exception)                binding.root.snackBar("No location detected. Make sure location is enabled on the device.")            }        }    }    private fun checkPermissions(): Boolean {        val permissionState = ActivityCompat.checkSelfPermission(            this,            Manifest.permission.ACCESS_COARSE_LOCATION        )        return permissionState == PackageManager.PERMISSION_GRANTED    }    private fun startLocationPermissionRequest() {        ActivityCompat.requestPermissions(            this@MainActivity,            arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION),            REQUEST_PERMISSIONS_REQUEST_CODE        )    }    private fun showSnackbar(        mainTextStringId: String,        actionStringId: String,        listener: View.OnClickListener    ) {        Toast.makeText(this@MainActivity, mainTextStringId, Toast.LENGTH_LONG).show()    }    private fun requestPermissions() {        val shouldProvideRationale = ActivityCompat.shouldShowRequestPermissionRationale(            this,            Manifest.permission.ACCESS_COARSE_LOCATION        )        if (shouldProvideRationale) {            Log.i(TAG, "Displaying permission rationale to provide additional context.")            showSnackbar("Location permission is needed for core functionality", "Okay") {                startLocationPermissionRequest()            }        } else {            Log.i(TAG, "Requesting permission")            startLocationPermissionRequest()        }    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<String>,        grantResults: IntArray    ) {        Log.i(TAG, "onRequestPermissionResult")        if (requestCode == REQUEST_PERMISSIONS_REQUEST_CODE) {            when {                grantResults.isEmpty() -> {                    // If user interaction was interrupted, the permission request is cancelled and you                    // receive empty arrays.                    Log.i(TAG, "User interaction was cancelled.")                }                grantResults[0] == PackageManager.PERMISSION_GRANTED -> {                    // Permission granted.                    getLastLocation()                }                else -> {                    showSnackbar(                        "Permission was denied", "Settings"                    ) {                        // Build intent that displays the App settings screen.                        val intent = Intent()                        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS                        val uri = Uri.fromParts(                            "package",                            Build.DISPLAY, null                        )                        intent.data = uri                        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK                        startActivity(intent)                    }                }            }        }    }    companion object {        private val TAG = "LocationProvider"        private val REQUEST_PERMISSIONS_REQUEST_CODE = 34    }}